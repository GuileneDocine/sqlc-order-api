// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (name, phone, email)
VALUES ($1, $2, $3)
RETURNING id, name, phone, email, created_at
`

type CreateCustomerParams struct {
	Name  string `json:"name"`
	Phone string `json:"phone"`
	Email string `json:"email"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer, arg.Name, arg.Phone, arg.Email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO "order" (customer_id, product_id, quantity,total_price)
VALUES ($1, $2, $3, $4)
RETURNING id, customer_id, product_id, quantity, total_price, created_at
`

type CreateOrderParams struct {
	CustomerID *string        `json:"customer_id"`
	ProductID  *string        `json:"product_id"`
	Quantity   string         `json:"quantity"`
	TotalPrice pgtype.Numeric `json:"total_price"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.CustomerID,
		arg.ProductID,
		arg.Quantity,
		arg.TotalPrice,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.ProductID,
		&i.Quantity,
		&i.TotalPrice,
		&i.CreatedAt,
	)
	return i, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (name, stock, price)
VALUES ($1, $2, $3)
RETURNING id, name, stock, price, created_at
`

type CreateProductParams struct {
	Name  string `json:"name"`
	Stock string `json:"stock"`
	Price string `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.Name, arg.Stock, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Stock,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const getCustomersByNameLike = `-- name: GetCustomersByNameLike :many
SELECT id, name, phone, email, created_at
FROM customer
WHERE name LIKE $1
`

func (q *Queries) GetCustomersByNameLike(ctx context.Context, name string) ([]Customer, error) {
	rows, err := q.db.Query(ctx, getCustomersByNameLike, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrder = `-- name: GetOrder :one
SELECT id, customer_id, product_id, quantity, total_price, created_at
FROM "order"
WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.ProductID,
		&i.Quantity,
		&i.TotalPrice,
		&i.CreatedAt,
	)
	return i, err
}

const getTotalRevenueForProduct = `-- name: GetTotalRevenueForProduct :one
SELECT SUM(total_price)
FROM "order"
WHERE product_id = $1
`

func (q *Queries) GetTotalRevenueForProduct(ctx context.Context, productID *string) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalRevenueForProduct, productID)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}

const updateCustomer = `-- name: UpdateCustomer :many
UPDATE customer 
SET name =$2,
    phone= $3,
    email = $4
WHERE id = $1
RETURNING id, name, phone, email, created_at
`

type UpdateCustomerParams struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Phone string `json:"phone"`
	Email string `json:"email"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) ([]Customer, error) {
	rows, err := q.db.Query(ctx, updateCustomer,
		arg.ID,
		arg.Name,
		arg.Phone,
		arg.Email,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :many
UPDATE product 
SET name = $2,
    stock = $3,
    price = $4
WHERE id = $1
RETURNING id, name, stock, price, created_at
`

type UpdateProductParams struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Stock string `json:"stock"`
	Price string `json:"price"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Stock,
		arg.Price,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Stock,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
