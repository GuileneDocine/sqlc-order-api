// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message.sql

package repo

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO message (thread_id, sender, content)
VALUES ($1, $2, $3)
RETURNING id, sender, content, created_at, thread_id
`

type CreateMessageParams struct {
	ThreadID *string `json:"thread_id"`
	Sender   string  `json:"sender"`
	Content  string  `json:"content"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.ThreadID, arg.Sender, arg.Content)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Sender,
		&i.Content,
		&i.CreatedAt,
		&i.ThreadID,
	)
	return i, err
}

const createThread = `-- name: CreateThread :one
INSERT INTO thread (topic)
VALUES ($1)
RETURNING id, topic, created_at
`

func (q *Queries) CreateThread(ctx context.Context, topic *string) (Thread, error) {
	row := q.db.QueryRow(ctx, createThread, topic)
	var i Thread
	err := row.Scan(&i.ID, &i.Topic, &i.CreatedAt)
	return i, err
}

const deleteAll = `-- name: DeleteAll :exec
DELETE FROM message
`

func (q *Queries) DeleteAll(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAll)
	return err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM message WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteMessage, id)
	return err
}

const getMessageByID = `-- name: GetMessageByID :one
SELECT id, sender, content, created_at, thread_id FROM message
WHERE id = $1
`

func (q *Queries) GetMessageByID(ctx context.Context, id string) (Message, error) {
	row := q.db.QueryRow(ctx, getMessageByID, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Sender,
		&i.Content,
		&i.CreatedAt,
		&i.ThreadID,
	)
	return i, err
}

const getMessagesByThread = `-- name: GetMessagesByThread :many
SELECT id, sender, content, created_at, thread_id FROM message
WHERE thread_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetMessagesByThread(ctx context.Context, threadID *string) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesByThread, threadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Sender,
			&i.Content,
			&i.CreatedAt,
			&i.ThreadID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getThreadById = `-- name: GetThreadById :one
SELECT id, topic, created_at FROM thread
WHERE id = $1
`

func (q *Queries) GetThreadById(ctx context.Context, id string) (Thread, error) {
	row := q.db.QueryRow(ctx, getThreadById, id)
	var i Thread
	err := row.Scan(&i.ID, &i.Topic, &i.CreatedAt)
	return i, err
}

const updateMessage = `-- name: UpdateMessage :exec
UPDATE message 
SET content = $2
WHERE id = $1
RETURNING id, sender, content, created_at, thread_id
`

type UpdateMessageParams struct {
	ID      string `json:"id"`
	Content string `json:"content"`
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) error {
	_, err := q.db.Exec(ctx, updateMessage, arg.ID, arg.Content)
	return err
}
