# This workflow automates CI for the PostgreSQL project
# It scans for vulnerabilities, lints the code, runs tests, and builds the Go binary.

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  golangci:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      # - name: Set up Go
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.23.8'
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.49.0  # Updated to a valid version

  govulncheck_job:
    runs-on: ubuntu-latest
    name: Run Vulnerability Check
    steps:
      # uses: actions/cache@v2  # caching errors
      # with:
      #   path: ~/.cache/go-build
      #   key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
      #   restore-keys: |
      #     ${{ runner.os }}-go-mod-
      - id: govulncheck
        uses: golang/govulncheck-action@v1
        with:
            go-version-input: '1.23.8'
            go-package: './...'

  test:
    runs-on: ubuntu-latest
    # Ensure tests run only after linting and vulnerability check
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.8'

      - name: Install dependencies
        run: go get .

      - name: Run Tests
        run: go test -v ./...

  build:
    runs-on: ubuntu-latest
    needs:  [golangci, govulncheck_job]   # Only build after tests/govulcheck have passed
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.8'

      - name: Build
        run: go build -v ./...
